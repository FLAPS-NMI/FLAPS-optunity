% Generated by roxygen2 (4.0.2): do not edit by hand
\name{cv.setup}
\alias{cv.setup}
\title{Creates cross-validation setup}
\usage{
cv.setup(x, y = NULL, score, num_folds = 5, num_iter = 1, strata = NULL,
  clusters = NULL, seed = NULL)
}
\arguments{
\item{x}{data matrix}

\item{y}{output labels, useful for supervised setup}

\item{score}{score function, like mean_se, or a list of functions. Set it to 'user.score' if evaluated functions (in cv.run, cv.particle_swarm) will also perform scoring.}

\item{num_folds}{number of folds}

\item{num_iter}{number of iterations (for doing repeated cross-validation)}

\item{strata}{(optional) list of strata, each strata is a list of samples ids that will be stratified (balanced) among the folds}

\item{clusters}{(optional) list of clusters, each cluster is a list of samples that always goes to the same fold}

\item{seed}{set seed for the random generator for generating folds}
}
\value{
object of class 'cv.setup' to be used for cv.run and optimization methods, like cv.particle_swarm
}
\description{
Creates cross-validation setup
}
\details{
cv.setup is used to make a setup by passing in your data as x and y (later is optional). The cv.setup object will define how the data will be partitioned and the score(s) computed in in the later commands.
}
\examples{
## data
x <- matrix(runif(50*40), 50, 40)
y <- x[,1] + 0.5*x[,2] + 0.1*runif(50)

## ridge regression
regr <- function(x, y, xtest, ytest, reg=0) {
    C =  diag(x=reg, ncol(x))
    beta = solve(t(x) \%*\% x + C, t(x) \%*\% y)
    ## make predictions for xtest
    xtest \%*\% beta
}

## compute mean squared error with CV with 2 repeats (iterations) and 10 folds
cv <- cv.setup(x, y, score=mean_se, num_folds = 10, num_iter = 2)
result <- cv.run(cv, regr)
result$score.mean

## compute both mean squared error and absolute error with CV
cv <- cv.setup(x, y, score=list(mse=mean_se, mae=mean_ae), num_folds = 10, num_iter = 2)
result <- cv.run(cv, regr)
result$score.mean


###### Example of user.score #######
## linear regression with own scoring function
regr.score <- function(x, y, xtest, ytest, reg=0) {
  C =  diag(x=reg, ncol(x))
  beta = solve(t(x) \%*\% x + C, t(x) \%*\% y)
  sum((xtest \%*\% beta - ytest)^2)
}

cv <- cv.setup(x, y, score="user.score", num_folds = 3, num_iter = 2)
result <- cv.run(cv, regr.score, reg = 0.1)
result$score.mean
}
\seealso{
\code{\link{cv.run}} for running cross-validation and \code{\link{cv.particle_swarm}} for finding optimal parameters
}

