{
 "metadata": {},
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Example of tuning an SVR model in scikit-learn with Optunity\n",
      "# This example requires sklearn\n",
      "import math\n",
      "import itertools\n",
      "import optunity\n",
      "import optunity.metrics\n",
      "import sklearn.svm\n",
      "import matplotlib.pylab as plt\n",
      "import time\n",
      "\n",
      "# CREATE THE TRAINING SET\n",
      "from sklearn.datasets import load_diabetes\n",
      "diabetes = load_diabetes()\n",
      "n = diabetes.data.shape[0]\n",
      "\n",
      "data = diabetes.data\n",
      "targets = diabetes.target\n",
      "\n",
      "# we will use nested 3-fold cross-validation\n",
      "# in the outer cross-validation pmseedure\n",
      "# we make the decorator explicitly so we can reuse the same folds\n",
      "# in both tuned and untuned approaches\n",
      "outer_cv = optunity.cross_validated(x=data, y=targets, num_folds=3)\n",
      "\n",
      "# compute area under mse curve of default parameters\n",
      "def compute_mse_standard(x_train, y_train, x_test, y_test):\n",
      "    model = sklearn.svm.SVR().fit(x_train, y_train)\n",
      "    predictions = model.predict(x_test)\n",
      "    return optunity.metrics.mse(y_test, predictions)\n",
      "\n",
      "# decorate with cross-validation\n",
      "compute_mse_standard = outer_cv(compute_mse_standard)\n",
      "mse_standard = compute_mse_standard()\n",
      "print('Nested cv mean squared error of non-tuned model: ' + str(mse_standard))\n",
      "\n",
      "# compute area under mse curve with tuned parameters\n",
      "# we use 2x5 fold cross-validation while tuning\n",
      "def compute_mse_tuned(x_train, y_train, x_test, y_test):\n",
      "\n",
      "    # define objective function\n",
      "    @optunity.cross_validated(x=x_train, y=y_train, num_iter=2, num_folds=5)\n",
      "    def tune_cv(x_train, y_train, x_test, y_test, C, gamma):\n",
      "        model = sklearn.svm.SVR(C=C, gamma=gamma).fit(x_train, y_train)\n",
      "        predictions = model.predict(x_test)\n",
      "        return optunity.metrics.mse(y_test, predictions)\n",
      "\n",
      "    # optimize parameters\n",
      "    optimal_pars, _, _ = optunity.minimize(tune_cv, 200, C=[0, 10], gamma=[0, 10], pmap=optunity.pmap)\n",
      "    # if you are running this in IPython, optunity.pmap will not work\n",
      "    # more info at: https://github.com/claesenm/optunity/issues/8\n",
      "    # comment out the above line and replace by the one below:\n",
      "    # optimal_pars, _, _ = optunity.minimize(inner_cv, 150, C=[0, 10], gamma=[0, 0.1])\n",
      "\n",
      "    tuned_model = sklearn.svm.SVR(**optimal_pars).fit(x_train, y_train)\n",
      "    predictions = tuned_model.predict(x_test)\n",
      "    return optunity.metrics.mse(y_test, predictions)\n",
      "\n",
      "# decorate with cross-validation\n",
      "compute_mse_tuned = outer_cv(compute_mse_tuned)\n",
      "\n",
      "t = time.time()\n",
      "mse_tuned = compute_mse_tuned()\n",
      "diff = time.time() - t\n",
      "print('Nested cv mean squared error of tuned model: ' + str(mse_tuned))\n",
      "print('Tuning time (approx): ' + str(diff/3) + ' seconds') # we tuned 3 times\n",
      "\n",
      "\n",
      "# generate folds, so we know the indices of test instances at any point\n",
      "folds = optunity.generate_folds(data.shape[0], num_folds=3)\n",
      "\n",
      "# create another cross-validation decorator\n",
      "# we will compare nested cross-validation results for both tuned and untuned models\n",
      "# to do this, we will perform  nested cross-validation but aggregate results using the identity function\n",
      "# this will yield the predictions\n",
      "outer_cv = optunity.cross_validated(x=data, y=targets, num_folds=3, folds=[folds],\n",
      "                                    aggregator=optunity.cross_validation.identity)\n",
      "\n",
      "def svr_untuned_predictions(x_train, y_train, x_test, y_test):\n",
      "    model = sklearn.svm.SVR().fit(x_train, y_train)\n",
      "    return model.predict(x_test).tolist()\n",
      "\n",
      "\n",
      "def svr_tuned_predictions(x_train, y_train, x_test, y_test):\n",
      "    @optunity.cross_validated(x=x_train, y=y_train, num_iter=2, num_folds=5)\n",
      "    def tune_cv(x_train, y_train, x_test, y_test, C, gamma):\n",
      "        model = sklearn.svm.SVR(C=C, gamma=gamma).fit(x_train, y_train)\n",
      "        predictions = model.predict(x_test)\n",
      "        return optunity.metrics.mse(y_test, predictions)\n",
      "\n",
      "    optimal_pars, _, _ = optunity.minimize(tune_cv, 200, C=[0, 20],\n",
      "                                           gamma=[0, 10], pmap=optunity.pmap)\n",
      "    tuned_model = sklearn.svm.SVR(**optimal_pars).fit(x_train, y_train)\n",
      "    return tuned_model.predict(x_test).tolist()\n",
      "\n",
      "svr_untuned_predictions = outer_cv(svr_untuned_predictions)\n",
      "svr_tuned_predictions = outer_cv(svr_tuned_predictions)\n",
      "\n",
      "untuned_preds = svr_untuned_predictions()\n",
      "tuned_preds = svr_tuned_predictions()\n",
      "\n",
      "true_targets = [targets[i] for i in itertools.chain(*folds)]\n",
      "untuned = list(itertools.chain(*untuned_preds))\n",
      "tuned = list(itertools.chain(*tuned_preds))\n",
      "\n",
      "#for y, u, t in zip(true_targets, untuned, tuned):\n",
      "#    print(str(y) + ' :: ' + str(u) + ' :: ' + str(t))\n",
      "\n",
      "print('plotting results')\n",
      "\n",
      "plt.plot(range(len(true_targets)), sorted(map(lambda x, y: math.fabs(x-y), tuned, true_targets)), 'b')\n",
      "plt.plot(range(len(true_targets)), sorted(map(lambda x, y: math.fabs(x-y), untuned, true_targets)), 'r')\n",
      "plt.xlabel('k largest error')\n",
      "plt.ylabel('absolute error')\n",
      "plt.legend(['tuned model', 'default hyperparameters'])\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}